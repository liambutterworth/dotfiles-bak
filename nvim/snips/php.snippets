#
# PHP Snippets
#

snippet ? "php tags" b
<?php

${0:${VISUAL}}
endsnippet

snippet ?? "php tags with closing tag" b
<?php
    ${0:${VISUAL}}
?>
endsnippet

snippet ?- "inline tags" b
<?php ${0:${VISUAL}} ?>
endsnippet

snippet ?= "inline tags echo" b
<?php echo ${0:${VISUAL}}; ?>
endsnippet

post_expand "vim.command('let b:PHP_InsideMultilineComment = 1')"
snippet / "doc block" b
/**
 * $0
 */
endsnippet

snippet /- "inline doc block" b
/** $0 */
endsnippet

snippet class "class" b
class ${1:`!p snip.rv=snip.basename`}
{
    ${VISUAL}$0
}
endsnippet

snippet new "new instance" b
${1:class} = new ${0:${1/\w+\s*/\u$0/}}($3)
endsnippet

snippet fun "function" b
function ${1:name}(${2:$param})
{
    ${VISUAL}$0
}
endsnippet

snippet __ "contructor method" b
public function __construct($1)
{
    ${VISUAL}$0
}
endsnippet

snippet pub "public method" b
public function ${1:name}($2)
{
    ${VISUAL}$0
}
endsnippet

snippet pro "protected method" b
protected function ${1:name}($2)
{
    ${VISUAL}$0
}
endsnippet

snippet pri "private method" b
private function ${1:name}($2)
{
    ${VISUAL}$0
}
endsnippet

snippet pubs "public static method" b
public static function ${1:name}($2)
{
    ${VISUAL}$0
}
endsnippet

snippet pros "protected static method" b
protected static function ${1:name}($2)
{
    ${VISUAL}$0
}
endsnippet

snippet pris "private static method" b
private static function ${1:name}($2)
{
    ${VISUAL}$0
}
endsnippet

snippet sw "switch conditional" bm
switch ($1) {
    case $2:
        ${0:${VISUAL}}
        break;
}
endsnippet

snippet case "switch case" b
case $1:
    ${0:${VISUAL}}
    break;
endsnippet

snippet for "for loop" b
for (${1:$${2:i}=${3:1}; $$2<=${4:3}; $$2${5:++}}) {
    ${0:${VISUAL}}
}
endsnippet

snippet fore "foreach loop" b
foreach (${1:key} as ${2:value}) {
    ${0:${VISUAL}}
}
endsnippet
